from numpy import inf
import numpy as np
import matplotlib.pyplot as plt
import math
wsz = 5
wsp = 3
max_range = 10
threshold = 1
# projection = 'polar'
projection = None
def window_stack(a):
        '''
        Function from here:
            https://stackoverflow.com/questions/15722324/sliding-window-in-numpy
        Returns a sliding window over a sample, a
        params
        ------
        a : np.array(m,n)
            Sample to slide over

        returns
        -------
        np.array(m,d)
            A stack of windowed samples, where d is the window size
        np.array(m,d)
            An array of the same size that gives the indicies of the windowed data
        '''
   
        num_windows = math.floor(float(len(a) - wsz + 1)/wsp)
        indexer = np.arange(wsz)[None, :] + wsp*np.arange(num_windows)[:, None]
        indexer = indexer.astype(np.int)
        return (a[indexer], indexer)
scan =  [1.081343412399292, 1.0638737678527832, 1.0614712238311768, 1.0865126848220825, 1.097873330116272, 1.0860306024551392, 1.0847004652023315, 1.073573112487793, 1.0938702821731567, 1.0835288763046265, 1.0884590148925781, 1.1068476438522339, 1.0927629470825195, 1.1186360120773315, 1.1055190563201904, 1.1055811643600464, 1.1219412088394165, 1.1281012296676636, 1.1397433280944824, 1.1269499063491821, 1.1254633665084839, 1.1637005805969238, 1.1839680671691895, 1.1708766222000122, 1.1932920217514038, 1.1944962739944458, 1.2204874753952026, 1.1988413333892822, 1.2260022163391113, 1.2418489456176758, 1.244097113609314, 1.2473118305206299, 1.2668594121932983, 1.2851250171661377, 1.3082906007766724, 1.3189771175384521, 1.3288333415985107, 1.3788193464279175, 1.3907687664031982, 1.423341989517212, 2.3903820514678955, 2.3550117015838623, 2.340318441390991, 2.3527517318725586, 2.3438315391540527, 2.3348019123077393, 2.360997438430786, 2.3428192138671875, 2.3674848079681396, 2.407743215560913, 2.41150164604187, 2.446894407272339, 2.4996519088745117, 2.529205560684204, 2.6253254413604736, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 3.443910837173462, 3.472346544265747, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 3.434140205383301, 3.3852033615112305, 3.3242363929748535, 3.2800302505493164, 3.2226555347442627, 3.1860196590423584, 3.152658700942993, 3.112752676010132, 3.074524164199829, 3.039893627166748, 2.9947824478149414, 2.969881534576416, 2.9515535831451416, 2.98655366897583, 3.074357748031616, 3.1902225017547607, 3.2857534885406494, 3.406933546066284, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 3.265148878097534, 3.305837392807007, 3.338120222091675, 3.382016181945801, 3.4259185791015625, 3.483431339263916, 3.4421610832214355, 3.366584539413452, 3.2999141216278076, 3.2461071014404297, 3.174879550933838, 2.568497657775879, 2.602418899536133, 2.661048412322998, 2.6880199909210205, 2.746612787246704, 2.808070659637451, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 3.1541106700897217, 3.023087501525879, 2.8883261680603027, 2.782259941101074, 2.6428279876708984, 2.5514185428619385, 2.4734692573547363, 2.36650013923645, 2.3142459392547607, 2.2178399562835693, 2.1447010040283203, 2.0903618335723877, 2.0155880451202393, 1.9779307842254639, 1.9213638305664062, 1.891955018043518, 1.8310378789901733, 1.7884396314620972, 1.7548311948776245, 1.7101333141326904, 1.672110676765442, 1.6410865783691406, 1.606931209564209, 1.585070252418518, 1.5492628812789917, 1.5027916431427002, 1.5058221817016602, 1.4652549028396606, 1.433403730392456, 1.4110872745513916, 1.3931303024291992, 1.377399206161499, 1.355072021484375, 1.3400623798370361, 1.3259769678115845, 1.3073649406433105, 1.2924315929412842, 1.2844029664993286, 1.2819514274597168, 1.2350822687149048, 1.2454462051391602, 1.2482351064682007, 1.2040746212005615, 1.2144649028778076, 1.198425054550171, 1.2000752687454224, 1.1980918645858765, 1.1699978113174438, 1.161145806312561, 1.1384330987930298, 1.1308860778808594, 1.1526374816894531, 1.1254901885986328, 1.1288955211639404, 1.122065782546997, 1.121057391166687, 1.08540678024292, 1.1157073974609375, 1.1094316244125366, 1.0915461778640747, 1.0926990509033203, 1.0904016494750977, 1.096740484237671, 1.0816055536270142, 1.0815885066986084, 1.0931806564331055, 1.0545392036437988, 1.092644214630127, 1.0930966138839722, 1.0761659145355225, 1.0822094678878784, 1.0796946287155151]
expected_scan = [0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.9000000357627869, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.9000000357627869, 0.9000000357627869, 0.9000000357627869, 0.9000000357627869, 0.9000000357627869, 0.9000000357627869, 0.9000000357627869, 0.9000000357627869, 0.949999988079071, 0.949999988079071, 0.949999988079071, 0.949999988079071, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0500000715255737, 1.0500000715255737, 1.0500000715255737, 1.100000023841858, 1.100000023841858, 1.100000023841858, 1.149999976158142, 1.149999976158142, 1.2000000476837158, 1.2000000476837158, 1.2000000476837158, 1.2000000476837158, 1.2000000476837158, 1.25, 1.25, 1.3000000715255737, 1.3000000715255737, 1.350000023841858, 1.399999976158142, 1.399999976158142, 1.5, 2.4000000953674316, 2.4000000953674316, 2.4000000953674316, 2.4000000953674316, 2.450000047683716, 2.450000047683716, 2.5, 2.6000001430511475, 2.6500000953674316, 2.799999952316284, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 2.9000000953674316, 2.9000000953674316, 2.950000047683716, 3.0, 3.049999952316284, 3.1000001430511475, 3.1500000953674316, 3.200000047683716, inf, 3.3500001430511475, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 2.950000047683716, 2.950000047683716, inf, inf, inf, inf, inf, 2.9000000953674316, 2.75, 2.6500000953674316, 2.5, 2.450000047683716, 2.299999952316284, 2.25, 2.200000047683716, 2.1000001430511475, 1.9500000476837158, 1.899999976158142, 1.8000000715255737, 1.75, 1.7000000476837158, 1.7000000476837158, 1.649999976158142, 1.600000023841858, 1.600000023841858, 1.5, 1.4500000476837158, 1.4500000476837158, 1.399999976158142, 1.399999976158142, 1.350000023841858, 1.350000023841858, 1.25, 1.25, 1.2000000476837158, 1.2000000476837158, 1.2000000476837158, 1.149999976158142, 1.149999976158142, 1.100000023841858, 1.100000023841858, 1.100000023841858, 1.0500000715255737, 1.0500000715255737, 1.100000023841858, 1.0500000715255737, 1.0500000715255737, 1.0500000715255737, 1.0500000715255737, 1.0, 1.0, 1.0, 1.0, 0.949999988079071, 0.949999988079071, 0.949999988079071, 0.949999988079071, 0.949999988079071, 0.949999988079071, 0.949999988079071, 0.949999988079071, 0.9000000357627869, 0.8500000238418579, 0.8500000238418579, 0.9000000357627869, 0.9000000357627869, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579, 0.8500000238418579]

scan = np.array(scan)

expected_scan = np.array(expected_scan)
scan[scan==inf] = np.nan
expected_scan[expected_scan==inf] = np.nan
print('Len of scan {}'.format(len(scan)))
print('Len of Escan {}'.format(len(expected_scan)))


ax = plt.subplot(221, projection=projection)
ax.plot(np.arange(0,2*np.pi, 2*np.pi/360), scan)

ax = plt.subplot(222, projection=projection)
ax.plot(np.arange(0,2*np.pi, 2*np.pi/360), expected_scan)

# scan[scan==np.nan] = np.inf
# expected_scan[expected_scan==np.nan] = np.inf
print(scan)
print(expected_scan)
scan[np.isnan(scan)] = max_range
expected_scan[np.isnan(expected_scan)] = max_range
print(scan)
print(expected_scan)
# fscan = np.fft.fft(scan)
# fescan = np.fft.fft(expected_scan)

# ax = plt.subplot(323)
# ax.plot(np.angle(fscan))

# ax = plt.subplot(324)
# ax.plot(np.angle(fescan))
# ax = plt.subplot(325)
# ax.plot(np.abs(fscan))


# ax = plt.subplot(326)
# ax.plot(np.abs(fescan))




# plt.show()
# plt.figure()

sw, sw_i = window_stack(scan)
ew, ew_i = window_stack(expected_scan)
detected_objects = np.zeros(scan.shape, dtype=np.bool)
er =[]
for s,e,i in zip(sw, ew, sw_i):
    # er = np.correlate(s,e)
    er.append(((s-e)**2).mean())
    if er[-1] > threshold:
        detected_objects[i] = True
er.extend([0,0])


plt.subplot(223, projection=projection)
# plt.plot(np.arange(0,2*np.pi, 2*np.pi/360),er )

er2 = expected_scan - scan
plt.plot(np.arange(0,2*np.pi, 2*np.pi/360),er2 )
# er2 = scan - expected_scan
er2[er2<0] = 0
kernel = np.ones(wsz) * 1.0/wsz
er2 = np.convolve(er2, kernel, mode='same')
plt.subplot(224, projection=projection)
plt.plot(np.arange(0,2*np.pi, 2*np.pi/360),er2)
plt.show()

